<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	/*// current date time value
	var rightNow = new GlideDateTime();
	
	//fetch record of the when needed date time
	
	var whenNeeded = new GlideDateTime(current.u_when_needed);
	
	//check if when needed date is before before the current date
	
	if(whenNeeded.before(rightNow))
		{
			gs.addErrorMessage("When Neeed date cannot be before to the current date, choose a date from the next day");
			current.setAbortAction(true);
		}

	*******Commeted as SCript Include was created and called*/
	
	var niUtil = new NeedItUtils();
	var isPast = niUtil.isDatePast(current.u_when_needed);
	
	if(isPast == true)
		{
			gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
		current.setAbortAction(true);
		}
	//Check for when needed date to not be the same as today
	/*
	var isToday = rightNow.getLocalDate();
	var today = whenNeeded.getLocalDate();
	
	//check is date is same as today
	if(isToday.compareTo(today)==0)
		{
			gs.addErrorMessage("When Neeed date cannot be the same as the current date");
			current.setAbortAction(true);
		}*/
	
	var isToday = niUtil.isTodayDate(current.u_when_needed);
	
	if(isToday == true)
		{
			gs.addErrorMessage("You cannot submit NeedIt requests for today.");
		current.setAbortAction(true);
			
		}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-18 16:37:32</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>217c0e292f87001020c3d6c6f699b61d</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_217c0e292f87001020c3d6c6f699b61d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-02-19 18:12:12</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=217c0e292f87001020c3d6c6f699b61d"/>
</record_update>
